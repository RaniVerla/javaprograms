//This is program is on stack NGER,NGEL,NSER,NSEL(Next greater element in simplefied version)


import java.util.Arrays;
import java.util.Stack;

public class Test {

	public static void main(String[] args) {

		 int arr[] = { 1, 3, 2, 4 };

		//int arr[] = { 1, 2, 3, 4, 5 };
		nextGreaterElementtoLeft(arr);
		nextGreaterElementtoRight(arr);

		nextSmallerElementtoLeft(arr);
		nextSmallerElementtoRight(arr);
	}

	private static void nextGreaterElementtoLeft(int[] arr) {

		Stack<Integer> stack = new Stack<>();

		int[] newarr = new int[arr.length];
		int[] newarr_idx = new int[arr.length];

		int k = 0;

		for (int i = arr.length - 1; i >= 0; i--) {
			if (stack.isEmpty()) {
				newarr[i] = -1;
			} else if (!stack.isEmpty() && arr[i] < stack.peek()) {
				newarr[i] = stack.peek();
			} else if (!stack.isEmpty() && arr[i] > stack.peek()) {

				while (!stack.isEmpty() && arr[i] >= stack.peek()) {
					stack.pop();
				}

				if (stack.isEmpty())
					newarr[i] = -1;
				else
					newarr[i] = stack.peek();

			}

			stack.push(arr[i]);
		}

		System.out.println(Arrays.toString(newarr));

	}

	private static void nextGreaterElementtoRight(int[] arr) {

		Stack<Integer> stack = new Stack<>();

		int[] newarr = new int[arr.length];
		int[] newarr_idx = new int[arr.length];

		int k = 0;

		for (int i = 0; i < arr.length; i++) {
			if (stack.isEmpty()) {
				newarr[i] = -1;
			} else if (!stack.isEmpty() && arr[i] < stack.peek()) {
				newarr[i] = stack.peek();
			} else if (!stack.isEmpty() && arr[i] > stack.peek()) {

				while (!stack.isEmpty() && arr[i] >= stack.peek()) {
					stack.pop();
				}

				if (stack.isEmpty())
					newarr[i] = -1;
				else
					newarr[i] = stack.peek();

			}

			stack.push(arr[i]);
		}

		System.out.println(Arrays.toString(newarr));

	}

	private static void nextSmallerElementtoLeft(int[] arr) {
		Stack<Integer> stack = new Stack<>();
		int[] newarr = new int[arr.length];

		for (int i = arr.length - 1; i >= 0; i--) {

			if (stack.isEmpty()) {
				newarr[i] = -1;
			} else if (!stack.isEmpty() && arr[i] > stack.peek()) {
				newarr[i] = stack.peek();
			} else if (!stack.isEmpty() && arr[i] < stack.peek()) {
				while (!stack.isEmpty() && arr[i] < stack.peek()) {
					stack.pop();
				}
				if (stack.isEmpty())
					newarr[i] = -1;
				else
					newarr[i] = stack.peek();

			}

			stack.push(arr[i]);
		}

		
		System.out.println(Arrays.toString(newarr));
	}

	private static void nextSmallerElementtoRight(int[] arr) {
		Stack<Integer> stack = new Stack<>();
		int[] newarr = new int[arr.length];

		for (int i = 0; i <arr.length; i++) {
			
			if (stack.isEmpty()) {
				newarr[i] = -1;
			} else if (!stack.isEmpty() && arr[i] > stack.peek()) {
				newarr[i] = stack.peek();
			} else if (!stack.isEmpty() && arr[i] < stack.peek()) {
				while (!stack.isEmpty() && arr[i] < stack.peek()) {
					stack.pop();
				}
				if (stack.isEmpty())
					newarr[i] = -1;
				else
					newarr[i] = stack.peek();

			}
			

			stack.push(arr[i]);
		}
		
		
		System.out.println(Arrays.toString(newarr));

	}

}
